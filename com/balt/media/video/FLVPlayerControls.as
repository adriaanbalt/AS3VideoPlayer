/** * @name AS3 Flash Video Player * * @author Adriaan Balt Louis Scholvinck * @version March 2008 * @description Handles the controls of the video player */package com.balt.media.video {	import com.balt.events.ObjectDataEvent;	import com.balt.log.Log;	import com.balt.template.IMainTemplate;	import com.balt.display.graphics.GraphicUtil;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageDisplayState;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.utils.Timer;		public class FLVPlayerControls extends FLVPlayer {				public static var FULLSCREEN_ON : String = "onFullScren";		public static var FULLSCREEN_OFF : String = "offFullScreen";		public static var EMBED : String = "onEmbed";				private var main : IMainTemplate;				public var controls : MovieClip;				private var controlsMask : Sprite;				public var seekBarWidth:int; 				public var readyToPlay : Boolean = false;				private var rectAspectRatio : Number;				public function FLVPlayerControls(main:IMainTemplate, w:int, h:int ) {			super(w, h);			rectAspectRatio = videowidth / videoheight;			this.main = main;		}				protected override function configControls() : void {			controls = main.assets.getLibraryAsset( "vpControls" ); // FIXME - centralize			this.addChild(controls);			//			controlsMask = GraphicUtil.drawRoundRect ( null, videowidth, videoheight + controls.btns.height, 0xFFFFFF);//			controlsMask.alpha = 0;//			this.addChild( controlsMask );			//controls.mask = controlsMask;			controls.btns.y = videoheight + 11;						controls.btns.buttonMode = false;			controls.btns.useHandCursor = false;						seekBarWidth = barWidth = controls.btns.progress.bg.width - controls.btns.progress.scrub.width;			startPoint = controls.btns.progress.scrub.x;			controls.btns.progress.playBar.width = 0;				/// seeker [			controls.btns.progress.scrub.buttonMode = true;			controls.btns.progress.scrub.useHandCursor = true;			controls.btns.progress.scrub.addEventListener(MouseEvent.MOUSE_UP, scrubberUp);			controls.btns.progress.scrub.addEventListener(MouseEvent.MOUSE_DOWN, seekerEvent);						controls.btns.progress.playBar.buttonMode = true;			controls.btns.progress.playBar.useHandCursor = true;			controls.btns.progress.playBar.addEventListener(MouseEvent.MOUSE_DOWN, playingBarEvent);						controls.btns.progress.bg.buttonMode = false;			controls.btns.progress.bg.useHandCursor = false;				//		controls.btns.progress.progressBG.buttonMode = true;	//		controls.btns.progress.progressBG.useHandCursor = true;	//		controls.btns.progress.progressBG.addEventListener(MouseEvent.MOUSE_DOWN, seekBarClick);	/// ] seeker				/// playpause [			controls.btns.playpauseBtn.buttonMode = true;			controls.btns.playpauseBtn.useHandCursor = true;			controls.btns.playpauseBtn.addEventListener(MouseEvent.MOUSE_DOWN, playPauseEvent);	/// ] playpause		/// playpause [			controls.btns.volume.soundOn.buttonMode = true;			controls.btns.volume.soundOn.addEventListener(MouseEvent.MOUSE_DOWN, soundOn);			controls.btns.volume.soundOff.buttonMode = true;			controls.btns.volume.soundOff.addEventListener(MouseEvent.MOUSE_DOWN, soundOff);			controls.btns.volume.soundOn.visible = false;			controls.btns.volume.soundOff.visible = true;	/// ] playpause				readyToPlay = true;		}		// PUBLIC		public override function START():void {			super.START();			controls.btns.playpauseBtn.playBtn.visible = false;			controls.btns.playpauseBtn.pauseBtn.visible = true;		}		public override function RESUME():void {			super.RESUME();		}				public override function PAUSE():void {			super.PAUSE();			controls.btns.playpauseBtn.playBtn.visible = true;			controls.btns.playpauseBtn.pauseBtn.visible = false;		}				public override function STOP():void {			controls.btns.playpauseBtn.playBtn.visible = true;			controls.btns.playpauseBtn.pauseBtn.visible = false;						super.STOP();		}				public override function VOLUME(volume:Number):void{			super.VOLUME(volume);		}				public override function TOGGLEPAUSE():void {			controls.btns.playpauseBtn.playBtn.visible = (controls.btns.playpauseBtn.playBtn.visible ? false : true);			controls.btns.playpauseBtn.pauseBtn.visible = (controls.btns.playpauseBtn.pauseBtn.visible ? false : true);			if ( controls.btns.playpauseBtn.playBtn.visible ) {				playingBarTimer.stop();			} else {				playingBarTimer.start();			}			super.TOGGLEPAUSE();		}		public override function destroy() : void {			super.destroy();		}		// PROTECTED		protected override function metaDataControls():void {			if( !readyToPlay ){				ns.pause();					controls.btns.playpauseBtn.playBtn.visible = true;				controls.btns.playpauseBtn.pauseBtn.visible = false;			} else {				controls.btns.playpauseBtn.playBtn.visible = false;				controls.btns.playpauseBtn.pauseBtn.visible = true;			}		}// PRIVATE/// [ TIME ] ///			private function formatTime(time:Number):String {			if(time > 0){			var integer:String = String((time*.0166)>>0);			var decimal:String = String((time%60)>>0);			return ((integer.length<2)?"0"+integer:integer)+":"+((decimal.length<2)?"0"+decimal:decimal);			} else return String("00:00");		}				private function playPauseEvent(evt:MouseEvent):void {			TOGGLEPAUSE();		}		// cuepoints		protected override function updateCuepoint( $dataObj : Object = null ) : void {			dispatchEvent( new ObjectDataEvent( FLVPlayer.EVENT_ON_CUEPOINT, true, false, $dataObj ));		}				// this does nothing, the cuepoints are "fake" made through playhead time @see checkplayhead();		private function cuePointHandler(data:Object) : void {			trace ( "cuepoint handler" + data.time + "name: " + data.name + " type= "  );		}	/// [ PROGRESS ] ///		private function seekerEvent(evt:MouseEvent):void {			PAUSE();			seeking = true;			var rectangle:Rectangle = new Rectangle(startPoint, controls.btns.progress.scrub.y, barWidth - controls.btns.progress.scrub.width, 0);			controls.btns.progress.scrub.startDrag(false, rectangle);			stage.addEventListener(MouseEvent.MOUSE_MOVE, scrubberMove);		}				private function scrubberMove(evt:MouseEvent):void { // for seeker position		   if(meta.duration > 0) {			    stage.addEventListener(MouseEvent.MOUSE_UP, scrubberUp);				playingBarTimer.reset();				if(seeking) {					var point:int = (((controls.btns.progress.scrub.x - startPoint) / barWidth) * meta.duration) >> 0;					if( point <= 0 || point >= (meta.duration >> 0)) controls.btns.progress.scrub.stopDrag();					var percent:int = int( ( point / meta.duration * barWidth).toFixed(2) );					controls.btns.progress.playBar.width = controls.btns.progress.scrub.x;					ns.seek(point);					checkPlayhead();				}			}		}				private function scrubberUp(evt:MouseEvent= null):void { // for stop seeking			if(seeking){				stage.removeEventListener(MouseEvent.MOUSE_MOVE, scrubberMove);				stage.removeEventListener(MouseEvent.MOUSE_UP, scrubberUp);				seeking = false;				controls.btns.progress.scrub.stopDrag();				RESUME();			}		}				protected override function playingBarTimerEvent( $e:TimerEvent = null):void {			if ( readyToPlay ) {				var percent:int;				if (!meta) {					Log.traceMsg ("Meta data is not defined for " + this.flv_file_path, Log.WARN);				}				percent = meta ? int( (ns.time / meta.duration * (barWidth)).toFixed(2) ) : 0;				controls.btns.progress.playBar.width = percent;				controls.btns.progress.scrub.x = startPoint + percent;				checkPlayhead();			}		}		protected override function progressBarTimerEvent( $e:TimerEvent = null):void {			var progress : Number = (( ns.bytesLoaded / ns.bytesTotal * 100 ) >> 0);			controls.btns.progress.progressBG.width = (barWidth + controls.btns.progress.scrub.width) * (progress/100);			if(progress >= 100){				progressBarTimer.stop();			}		}				private function playingBarEvent(evt:MouseEvent):void {			//click to seek			var point:Number = (meta.duration * (evt.localX * controls.btns.progress.playBar.width / seekBarWidth) / barWidth);			ns.seek(point);						var percent:int = int( (point / meta.duration * (barWidth)).toFixed(2) );			controls.btns.progress.playBar.width = percent;			controls.btns.progress.scrub.x = startPoint + percent;							checkPlayhead();		}				private function seekBarClick(evt:MouseEvent):void { 			//click to seek			var point:Number = (evt.localX * meta.duration / seekBarWidth);			ns.seek(point);						var percent:int = int( (point / meta.duration * (barWidth)).toFixed(2) );			controls.btns.progress.playBar.width = controls.btns.progress.scrub.x = startPoint + percent;						checkPlayhead();		}		// VOLUME				private function soundOn(evt:Event):void {			VOLUME( 1 );			controls.btns.volume.soundOn.visible = false;			controls.btns.volume.soundOff.visible = true;		}				private function soundOff(evt:Event):void {			VOLUME( 0 );			controls.btns.volume.soundOn.visible = true;			controls.btns.volume.soundOff.visible = false;		}					}}